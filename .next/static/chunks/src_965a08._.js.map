{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/twitterx/src/actions/product.action.tsx"],"sourcesContent":["\"use server\";\n\nimport { connectDB } from \"@/lib/mongoose\";\nimport { ProductModel } from \"@/models/productMongo\";\nimport { revalidatePath, unstable_cache } from \"next/cache\";\nimport { logger } from \"@/lib/logger\";\n\nexport const getCachedProducts = unstable_cache(\n  async () => {\n    try {\n      await connectDB();\n      const products = await ProductModel.find({});\n      return products;\n    } catch (error) {\n      logger.error(\"Error fetching products:\", error);\n      throw new Error(\"Failed to fetch products\");\n    }\n  },\n  [\"products\"],\n  { revalidate: 1 }\n);\n\nexport async function getProductById(productId: Number) {\n  try {\n    await connectDB();\n    const product = await ProductModel.findById(productId);\n    if (!product) throw new Error(\"Product not found\");\n    return product;\n  } catch (error) {\n    logger.error(`Error fetching product ID ${productId}:`, error);\n    throw new Error(\"Failed to fetch product\");\n  }\n}\n\nexport async function checkExistingProduct(name: string) {\n  try {\n    await connectDB();\n    return await ProductModel.findOne({ name });\n  } catch (error) {\n    logger.error(`Error checking existing product ${name}:`, error);\n    throw new Error(\"Failed to check product existence\");\n  }\n}\n\nexport async function createProduct(\n  name: string,\n  price: number,\n  description: string\n) {\n  try {\n    await connectDB();\n\n    const existingProduct = await checkExistingProduct(name);\n    if (existingProduct) throw new Error(\"Product already exists\");\n\n    const newProduct = new ProductModel({ name, price, description });\n    await newProduct.save();\n\n    revalidatePath(\"/products\");\n\n    logger.info(`Product created: ${name}`);\n    return newProduct;\n  } catch (error) {\n    logger.error(\"Error creating product:\", error);\n    throw new Error(\"Failed to create product\");\n  }\n}\n\nexport async function updateProduct(\n  productId: string,\n  updateData: Partial<{ name: string; price: number; description: string }>\n) {\n  try {\n    await connectDB();\n    const updatedProduct = await ProductModel.findByIdAndUpdate(\n      productId,\n      updateData,\n      { new: true }\n    );\n\n    if (!updatedProduct) throw new Error(\"Product not found\");\n\n    // Revalidate cache\n    revalidatePath(\"/products\");\n\n    logger.info(`Product updated: ${productId}`);\n    return updatedProduct;\n  } catch (error) {\n    logger.error(`Error updating product ID ${productId}:`, error);\n    throw new Error(\"Failed to update product\");\n  }\n}\n\nexport async function deleteProduct(productId: string) {\n  try {\n    await connectDB();\n    const deletedProduct = await ProductModel.findByIdAndDelete(productId);\n\n    if (!deletedProduct) throw new Error(\"Product not found\");\n\n    revalidatePath(\"/products\");\n\n    logger.info(`Product deleted: ${productId}`);\n    return deletedProduct;\n  } catch (error) {\n    logger.error(`Error deleting product ID ${productId}:`, error);\n    throw new Error(\"Failed to delete product\");\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;IAOa;IAeS;IAYA;IAUA;IAwBA;IAyBA"}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/twitterx/src/components/ui/skeleton.tsx"],"sourcesContent":["import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n"],"names":[],"mappings":";;;;AAAA;;;AAEA,SAAS,SAAS,EAChB,SAAS,EACT,GAAG,OACkC;IACrC,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,0CAA0C;QACvD,GAAG,KAAK;;;;;;AAGf;KAVS"}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/twitterx/src/components/ProductSkeleton.tsx"],"sourcesContent":["import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport function ProductSkeleton() {\n  // array of 5 items\n  const skeletonItems = Array.from({ length: 6 }, (_, i) => i);\n\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-2 gap-6\">\n      {skeletonItems.map((index) => (\n        <div key={index}>\n          <Skeleton className=\"h-36 w-full rounded-md\" />\n          <Skeleton className=\"h-3 w-full rounded-md\" />\n        </div>\n      ))}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;;;AAEO,SAAS;IACd,mBAAmB;IACnB,MAAM,gBAAgB,MAAM,IAAI,CAAC;QAAE,QAAQ;IAAE,GAAG,CAAC,GAAG,IAAM;IAE1D,qBACE,6LAAC;QAAI,WAAU;kBACZ,cAAc,GAAG,CAAC,CAAC,sBAClB,6LAAC;;kCACC,6LAAC,uIAAA,CAAA,WAAQ;wBAAC,WAAU;;;;;;kCACpB,6LAAC,uIAAA,CAAA,WAAQ;wBAAC,WAAU;;;;;;;eAFZ;;;;;;;;;;AAOlB;KAdgB"}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/twitterx/src/app/products/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\"; // Assuming you have shadcn components\nimport { getCachedProducts } from \"@/actions/product.action\";\nimport toast from \"react-hot-toast\";\nimport { IProduct } from \"@/models/productMongo\";\nimport { ProductSkeleton } from \"@/components/ProductSkeleton\";\nimport { Button } from \"@/components/ui/button\";\n// type Products = Awaited<ReturnType<typeof getCachedProducts>>;\n\nconst page = () => {\n  const [products, setProducts] = useState<IProduct[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getCachedProducts();\n        setProducts(data);\n      } catch (error) {\n        toast.error(\"Failed to fetch notifications\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchNotifications();\n  }, []);\n\n  if (isLoading) return <ProductSkeleton />;\n  return (\n    <div>\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-2 gap-8\">\n        {products.map((product) => (\n          <Card\n            key={product._id}\n            className=\"border rounded-lg shadow-lg overflow-hidden\"\n          >\n            <CardContent>\n              <img\n                src={product.image || \"https://via.placeholder.com/300\"}\n                alt={product.title}\n                className=\"w-full h-52 object-cover rounded-t-lg\"\n              />\n            </CardContent>\n            <CardFooter className=\"flex flex-col p-4 space-y-2\">\n              <a href={`products/${product._id}`}>\n                <CardTitle className=\"text-xl font-semibold text-gray-800 dark:text-gray-300\">\n                  {product.title}\n                </CardTitle>\n              </a>\n              <CardDescription className=\"text-gray-600  dark:text-gray-300 text-sm\">\n                {product.description}\n              </CardDescription>\n              <div className=\"flex justify-between items-center w-full px-5 py-4\">\n\n                <div><span className=\"text-lg font-bold\">\n                  {product?.price || 'Үнэ бичигдээгүй байна'} ₮\n                </span></div>\n              <div>\n                {\n                  product?.stock>0 ? <> <Button>Сагсанд нэмэх</Button></>:<><Button variant={\"outline\"} disabled={true}>Дууссан</Button></> \n                }\n               </div>\n              </div>\n            </CardFooter>\n          </Card>\n        ))}\n        \n      </div>\n    </div>\n  );\n};\n\nexport default page;\n"],"names":[],"mappings":";;;;AAEA;AACA,kOAM+B,sCAAsC;AACrE;AACA;AAEA;AACA;;;AAdA;;;;;;;AAeA,iEAAiE;AAEjE,MAAM,OAAO;;IACX,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAc,EAAE;IACvD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;0BAAE;YACR,MAAM;qDAAqB;oBACzB,aAAa;oBACb,IAAI;wBACF,MAAM,OAAO,MAAM,CAAA,GAAA,uIAAA,CAAA,oBAAiB,AAAD;wBACnC,YAAY;oBACd,EAAE,OAAO,OAAO;wBACd,0JAAA,CAAA,UAAK,CAAC,KAAK,CAAC;oBACd,SAAU;wBACR,aAAa;oBACf;gBACF;;YAEA;QACF;yBAAG,EAAE;IAEL,IAAI,WAAW,qBAAO,6LAAC,wIAAA,CAAA,kBAAe;;;;;IACtC,qBACE,6LAAC;kBACC,cAAA,6LAAC;YAAI,WAAU;sBACZ,SAAS,GAAG,CAAC,CAAC,wBACb,6LAAC,mIAAA,CAAA,OAAI;oBAEH,WAAU;;sCAEV,6LAAC,mIAAA,CAAA,cAAW;sCACV,cAAA,6LAAC;gCACC,KAAK,QAAQ,KAAK,IAAI;gCACtB,KAAK,QAAQ,KAAK;gCAClB,WAAU;;;;;;;;;;;sCAGd,6LAAC,mIAAA,CAAA,aAAU;4BAAC,WAAU;;8CACpB,6LAAC;oCAAE,MAAM,CAAC,SAAS,EAAE,QAAQ,GAAG,EAAE;8CAChC,cAAA,6LAAC,mIAAA,CAAA,YAAS;wCAAC,WAAU;kDAClB,QAAQ,KAAK;;;;;;;;;;;8CAGlB,6LAAC,mIAAA,CAAA,kBAAe;oCAAC,WAAU;8CACxB,QAAQ,WAAW;;;;;;8CAEtB,6LAAC;oCAAI,WAAU;;sDAEb,6LAAC;sDAAI,cAAA,6LAAC;gDAAK,WAAU;;oDAClB,SAAS,SAAS;oDAAwB;;;;;;;;;;;;sDAE/C,6LAAC;sDAEG,SAAS,QAAM,kBAAI;;oDAAE;kEAAC,6LAAC,qIAAA,CAAA,SAAM;kEAAC;;;;;;;6EAA0B;0DAAE,cAAA,6LAAC,qIAAA,CAAA,SAAM;oDAAC,SAAS;oDAAW,UAAU;8DAAM;;;;;;;;;;;;;;;;;;;;;;;;;mBA1BvG,QAAQ,GAAG;;;;;;;;;;;;;;;AAqC5B;GA/DM;uCAiES"}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}