{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/x/src/app/api/uploadthing/core.ts"],"sourcesContent":["import { createUploadthing, type FileRouter } from \"uploadthing/next\";\nimport { auth } from \"@clerk/nextjs/server\";\n\nconst f = createUploadthing();\n\nexport const ourFileRouter = {\n  // define routes for different upload types\n  postImage: f({\n    image: {\n      maxFileSize: \"4MB\",\n      maxFileCount: 1,\n    },\n  })\n    .middleware(async () => {\n      // this code runs on your server before upload\n      const { userId } = await auth();\n      if (!userId) throw new Error(\"Unauthorized\");\n\n      // whatever is returned here is accessible in onUploadComplete as `metadata`\n      return { userId };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      try {\n        return { fileUrl: file.url };\n      } catch (error) {\n        console.error(\"Error in onUploadComplete:\", error);\n        throw error;\n      }\n    }),\n} satisfies FileRouter;\n\nexport type OurFileRouter = typeof ourFileRouter;"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,IAAI,CAAA,GAAA,8JAAA,CAAA,oBAAiB,AAAD;AAEnB,MAAM,gBAAgB;IAC3B,2CAA2C;IAC3C,WAAW,EAAE;QACX,OAAO;YACL,aAAa;YACb,cAAc;QAChB;IACF,GACG,UAAU,CAAC;QACV,8CAA8C;QAC9C,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,qLAAA,CAAA,OAAI,AAAD;QAC5B,IAAI,CAAC,QAAQ,MAAM,IAAI,MAAM;QAE7B,4EAA4E;QAC5E,OAAO;YAAE;QAAO;IAClB,GACC,gBAAgB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;QACzC,IAAI;YACF,OAAO;gBAAE,SAAS,KAAK,GAAG;YAAC;QAC7B,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,MAAM;QACR;IACF;AACJ"}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/x/src/app/api/uploadthing/route.ts"],"sourcesContent":["\nimport { createRouteHandler } from \"uploadthing/next\";\n\nimport { ourFileRouter } from \"./core\";\n\nexport const { GET, POST } = createRouteHandler({\n  router: ourFileRouter,\n});\n"],"names":[],"mappings":";;;;AAGA;AAFA;;;AAIO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,8JAAA,CAAA,qBAAkB,AAAD,EAAE;IAC9C,QAAQ,0IAAA,CAAA,gBAAa;AACvB"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}