{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/x/src/lib/logger.tsx"],"sourcesContent":["import winston from \"winston\";\n\nexport const logger = winston.createLogger({\n  level: \"info\",\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.printf(({ timestamp, level, message }) => {\n      return `[${timestamp}] ${level}: ${message}`;\n    })\n  ),\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: \"logs/app.log\" }),\n  ],\n});"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,SAAS,yIAAA,CAAA,UAAO,CAAC,YAAY,CAAC;IACzC,OAAO;IACP,QAAQ,yIAAA,CAAA,UAAO,CAAC,MAAM,CAAC,OAAO,CAC5B,yIAAA,CAAA,UAAO,CAAC,MAAM,CAAC,SAAS,IACxB,yIAAA,CAAA,UAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE;QAClD,OAAO,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,EAAE,SAAS;IAC9C;IAEF,YAAY;QACV,IAAI,yIAAA,CAAA,UAAO,CAAC,UAAU,CAAC,OAAO;QAC9B,IAAI,yIAAA,CAAA,UAAO,CAAC,UAAU,CAAC,IAAI,CAAC;YAAE,UAAU;QAAe;KACxD;AACH"}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/x/src/lib/mongoose.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nimport { logger } from \"@/lib/logger\"; // Assuming logger.ts is located in lib\n\nconst MONGODB_URI = process.env.MONGODB_URI as string;\n\nif (!MONGODB_URI) {\n  throw new Error(\"Please define the MONGODB_URI environment variable.\");\n}\n\nlet cached = (global as any).mongoose || { conn: null, promise: null };\n\nexport async function connectDB() {\n  if (cached.conn) {\n    logger.info(\"MongoDB Connection (cached)\");\n    return cached.conn; \n  }\n\n  if (!cached.promise) {\n    cached.promise = mongoose.connect(MONGODB_URI, {\n      dbName: \"ecommerce\"\n    })\n      .then((mongooseInstance) => {\n        cached.conn = mongooseInstance;\n        logger.info(\"MongoDB Connected\");\n        return cached.conn;\n      })\n      .catch((error) => {\n        logger.error(`MongoDB Connection Error: ${error.message}`);\n        throw new Error(`MongoDB Connection Error: ${error.message}`); \n      });\n  }\n\n  try {\n    return await cached.promise;\n  } catch (error) {\n    logger.error(`Error establishing MongoDB connection: ${error}`);\n    throw new Error(`Error establishing MongoDB connection: ${error}`);\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA,yMAAuC,uCAAuC;;;AAE9E,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,AAAC,OAAe,QAAQ,IAAI;IAAE,MAAM;IAAM,SAAS;AAAK;AAE9D,eAAe;IACpB,IAAI,OAAO,IAAI,EAAE;QACf,qHAAA,CAAA,SAAM,CAAC,IAAI,CAAC;QACZ,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;YAC7C,QAAQ;QACV,GACG,IAAI,CAAC,CAAC;YACL,OAAO,IAAI,GAAG;YACd,qHAAA,CAAA,SAAM,CAAC,IAAI,CAAC;YACZ,OAAO,OAAO,IAAI;QACpB,GACC,KAAK,CAAC,CAAC;YACN,qHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,CAAC,0BAA0B,EAAE,MAAM,OAAO,EAAE;YACzD,MAAM,IAAI,MAAM,CAAC,0BAA0B,EAAE,MAAM,OAAO,EAAE;QAC9D;IACJ;IAEA,IAAI;QACF,OAAO,MAAM,OAAO,OAAO;IAC7B,EAAE,OAAO,OAAO;QACd,qHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,CAAC,uCAAuC,EAAE,OAAO;QAC9D,MAAM,IAAI,MAAM,CAAC,uCAAuC,EAAE,OAAO;IACnE;AACF"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/x/src/models/productMongo.ts"],"sourcesContent":["import mongoose, { Schema, Document, Model } from \"mongoose\";\n\nexport interface IProduct extends Document {\n    _id: number;\n    title: string;\n    description: string;\n    price: number;\n    image: string;\n}\n\nconst ProductSchema = new Schema<IProduct>(\n    {\n        _id: { type: Number, required: true },\n        title: { type: String, required: true, unique: true },\n        description: { type: String, required: true },\n        price: { type: Number, required: true },\n        image: { type: String, required: false },\n    },\n    { timestamps: true }\n);\n\nexport const Products: Model<IProduct> =\n  mongoose.models.Products || mongoose.model<IProduct>(\"products\", ProductSchema);"],"names":[],"mappings":";;;AAAA;;AAUA,MAAM,gBAAgB,IAAI,yGAAA,CAAA,SAAM,CAC5B;IACI,KAAK;QAAE,MAAM;QAAQ,UAAU;IAAK;IACpC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,aAAa;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC5C,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAM;AAC3C,GACA;IAAE,YAAY;AAAK;AAGhB,MAAM,WACX,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAW,YAAY"}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/x/src/actions/product.action.tsx"],"sourcesContent":["\"use server\";\n\nimport { connectDB } from \"@/lib/mongoose\";\nimport { Products } from \"@/models/productMongo\";\nimport { revalidatePath, unstable_cache } from \"next/cache\";\nimport { logger } from \"@/lib/logger\";\n\nexport const getCachedProducts = unstable_cache(async () => {\n  try {\n    await connectDB();\n    const products = await Products.find({});\n    return products;\n  } catch (error) {\n    logger.error(\"Error fetching products:\", error);\n    throw new Error(\"Failed to fetch products\");\n  }\n}, [\"products\"], { revalidate: 1 });\n\nexport async function getProductById(productId: string) {\n  try {\n    await connectDB();\n    const product = await Products.findById(productId);\n    if (!product) throw new Error(\"Product not found\");\n    return product;\n  } catch (error) {\n    logger.error(`Error fetching product ID ${productId}:`, error);\n    throw new Error(\"Failed to fetch product\");\n  }\n}\n\nexport async function checkExistingProduct(name: string) {\n  try {\n    await connectDB();\n    return await Products.findOne({ name });\n  } catch (error) {\n    logger.error(`Error checking existing product ${name}:`, error);\n    throw new Error(\"Failed to check product existence\");\n  }\n}\n\nexport async function createProduct(name: string, price: number, description: string) {\n  try {\n    await connectDB();\n\n    const existingProduct = await checkExistingProduct(name);\n    if (existingProduct) throw new Error(\"Product already exists\");\n\n    const newProduct = new Products({ name, price, description });\n    await newProduct.save();\n\n    revalidatePath(\"/products\");\n\n    logger.info(`Product created: ${name}`);\n    return newProduct;\n  } catch (error) {\n    logger.error(\"Error creating product:\", error);\n    throw new Error(\"Failed to create product\");\n  }\n}\n\nexport async function updateProduct(productId: string, updateData: Partial<{ name: string; price: number; description: string }>) {\n  try {\n    await connectDB();\n    const updatedProduct = await Products.findByIdAndUpdate(productId, updateData, { new: true });\n\n    if (!updatedProduct) throw new Error(\"Product not found\");\n\n    // Revalidate cache\n    revalidatePath(\"/products\");\n\n    logger.info(`Product updated: ${productId}`);\n    return updatedProduct;\n  } catch (error) {\n    logger.error(`Error updating product ID ${productId}:`, error);\n    throw new Error(\"Failed to update product\");\n  }\n}\n\nexport async function deleteProduct(productId: string) {\n  try {\n    await connectDB();\n    const deletedProduct = await Products.findByIdAndDelete(productId);\n    \n    if (!deletedProduct) throw new Error(\"Product not found\");\n\n    revalidatePath(\"/products\");\n\n    logger.info(`Product deleted: ${productId}`);\n    return deletedProduct;\n  } catch (error) {\n    logger.error(`Error deleting product ID ${productId}:`, error);\n    throw new Error(\"Failed to delete product\");\n  }\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 328, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/x/src/app/products/page.tsx"],"sourcesContent":["import React from 'react'\nimport { Card, CardContent, CardFooter, CardTitle, CardDescription } from \"@/components/ui/card\"; // Assuming you have shadcn components\nimport { getCachedProducts } from '@/actions/product.action';\n\ntype ProductType = Awaited<ReturnType<typeof getCachedProducts>>;\n\nasync function page() {\nconst res= await getCachedProducts();\nconsole.log(res)\n  return (\n    <div>\n        <div className='grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-2 gap-8'>\n        <div>1</div>\n        <div>1</div>\n        <div>1</div>\n        <div>1</div>\n        </div>\n    </div>\n  )\n}\n\nexport default page"],"names":[],"mappings":";;;;AAEA;;;AAIA,eAAe;IACf,MAAM,MAAK,MAAM,CAAA,GAAA,oIAAA,CAAA,oBAAiB,AAAD;IACjC,QAAQ,GAAG,CAAC;IACV,qBACE,8OAAC;kBACG,cAAA,8OAAC;YAAI,WAAU;;8BACf,8OAAC;8BAAI;;;;;;8BACL,8OAAC;8BAAI;;;;;;8BACL,8OAAC;8BAAI;;;;;;8BACL,8OAAC;8BAAI;;;;;;;;;;;;;;;;;AAIb;uCAEe"}},
    {"offset": {"line": 389, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}