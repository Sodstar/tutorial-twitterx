{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/twitterx/src/components/CreatePost.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/CreatePost.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/CreatePost.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiS,GAC9T,+DACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/twitterx/src/components/CreatePost.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/CreatePost.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/CreatePost.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6Q,GAC1S,2CACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/twitterx/src/components/FollowButton.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/FollowButton.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/FollowButton.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmS,GAChU,iEACA"}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/twitterx/src/components/FollowButton.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/FollowButton.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/FollowButton.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+Q,GAC5S,6CACA"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/twitterx/src/components/WhoToFollow.tsx"],"sourcesContent":["import { getRandomUsers } from \"@/actions/user.action\";\nimport React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport Link from \"next/link\";\nimport { Avatar, AvatarImage } from \"./ui/avatar\";\nimport FollowButton from \"./FollowButton\";\n\nasync function WhoToFollow() {\n  const users = await getRandomUsers();\n  console.log(users);\n  if (users.length === 0) return null;\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Таньд санал болгох</CardTitle>\n      </CardHeader>\n      <CardContent>\n      <div className=\"space-y-4\">\n          {users.map((user) => (\n            <div key={user.id} className=\"flex gap-2 items-center justify-between \">\n              <div className=\"flex items-center gap-1\">\n                <Link href={`/profile/${user.username}`}>\n                  <Avatar>\n                    <AvatarImage src={user.image ?? \"/avatar.png\"} />\n                  </Avatar>\n                </Link>\n                <div className=\"text-xs\">\n                  <Link href={`/profile/${user.username}`} className=\"font-medium cursor-pointer\">\n                    {user.name}\n                  </Link>\n                  <p className=\"text-muted-foreground\">@{user.username}</p>\n                  <p className=\"text-muted-foreground\">{user._count.followers} followers</p>\n                </div>\n              </div>\n              <FollowButton userId={user.id} />\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default WhoToFollow;\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;AACA;;;;;;;AAEA,eAAe;IACb,MAAM,QAAQ,MAAM,CAAA,GAAA,iIAAA,CAAA,iBAAc,AAAD;IACjC,QAAQ,GAAG,CAAC;IACZ,IAAI,MAAM,MAAM,KAAK,GAAG,OAAO;IAC/B,qBACE,8OAAC,gIAAA,CAAA,OAAI;;0BACH,8OAAC,gIAAA,CAAA,aAAU;0BACT,cAAA,8OAAC,gIAAA,CAAA,YAAS;8BAAC;;;;;;;;;;;0BAEb,8OAAC,gIAAA,CAAA,cAAW;0BACZ,cAAA,8OAAC;oBAAI,WAAU;8BACV,MAAM,GAAG,CAAC,CAAC,qBACV,8OAAC;4BAAkB,WAAU;;8CAC3B,8OAAC;oCAAI,WAAU;;sDACb,8OAAC,4JAAA,CAAA,UAAI;4CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,QAAQ,EAAE;sDACrC,cAAA,8OAAC,kIAAA,CAAA,SAAM;0DACL,cAAA,8OAAC,kIAAA,CAAA,cAAW;oDAAC,KAAK,KAAK,KAAK,IAAI;;;;;;;;;;;;;;;;sDAGpC,8OAAC;4CAAI,WAAU;;8DACb,8OAAC,4JAAA,CAAA,UAAI;oDAAC,MAAM,CAAC,SAAS,EAAE,KAAK,QAAQ,EAAE;oDAAE,WAAU;8DAChD,KAAK,IAAI;;;;;;8DAEZ,8OAAC;oDAAE,WAAU;;wDAAwB;wDAAE,KAAK,QAAQ;;;;;;;8DACpD,8OAAC;oDAAE,WAAU;;wDAAyB,KAAK,MAAM,CAAC,SAAS;wDAAC;;;;;;;;;;;;;;;;;;;8CAGhE,8OAAC,kIAAA,CAAA,UAAY;oCAAC,QAAQ,KAAK,EAAE;;;;;;;2BAfrB,KAAK,EAAE;;;;;;;;;;;;;;;;;;;;;AAsB7B;uCAEe"}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/twitterx/src/actions/post.action.tsx"],"sourcesContent":["\"use server\";\nimport prisma from \"@/lib/prisma\";\nimport { getDBUserID } from \"./user.action\";\nimport { revalidatePath } from \"next/cache\";\n\nexport async function createPost(content: string, imageUrl: string) {\n  try {\n    const userId = await getDBUserID();\n    // if (!userId) return {success:false, error:\"User not found\"};\n    if (!userId) return;\n\n    const post = await prisma.post.create({\n      data: {\n        content,\n        image: imageUrl, // directly write image\n        authorId: userId,\n      },\n    });\n\n    revalidatePath(\"/\"); //purge the cache for the home page\n    return { success: true, post };\n  } catch (error) {\n    console.error(error);\n    return { success: false, error: \"Failed to create post\" };\n  }\n}\n\nexport async function getPosts() {\n  try {\n    const posts = await prisma.post.findMany({\n      orderBy: {\n        createdAt: \"desc\",\n      },\n      include: {\n        author: {\n          select: {\n            id: true,\n            name: true,\n            image: true,\n            username: true,\n          },\n        },\n        comments: {\n          include: {\n            author: {\n              select: {\n                id: true,\n                username: true,\n                image: true,\n                name: true,\n              },\n            },\n          },\n          orderBy: {\n            createdAt: \"asc\",\n          },\n        },\n        likes: {\n          select: {\n            userId: true,\n          },\n        },\n        _count: {\n          select: {\n            likes: true,\n            comments: true,\n          },\n        },\n      },\n    });\n\n    return posts;\n  } catch (error) {\n    console.log(\"Error in getPosts\", error);\n    throw new Error(\"Failed to fetch posts\");\n  }\n}\n\nexport async function toggleLike(postId: string) {\n  if (!postId) return;\n  try {\n    const userId = await getDBUserID();\n    if (!userId) return;\n    const existLike = await prisma.like.findUnique({\n      where: {\n        userId_postId: {\n          userId,\n          postId,\n        },\n      },\n    });\n\n    const post = await prisma.post.findUnique({\n      where: { id: postId },\n      select: { authorId: true },\n    });\n\n    if (!post) throw new Error(\"Post not found\");\n\n    if (existLike) {\n      await prisma.like.delete({\n        where: {\n          userId_postId: {\n            userId,\n            postId,\n          },\n        },\n      });\n    } else {\n      await prisma.$transaction([\n        prisma.like.create({\n          data: {\n            postId,\n            userId,\n          },\n        }),\n        ...(post.authorId !== userId //true утга буцаах үед transaction массивт оруулна\n          ? [\n              prisma.notification.create({\n                data: {\n                  type: \"LIKE\",\n                  userId: post.authorId,\n                  creatorId: userId,\n                  postId,\n                },\n              }),\n            ]\n          : []),\n      ]);\n      revalidatePath(\"/\")\n      return {success:true}\n    }\n  } catch (error) {\n    console.error(error);\n    return {success:false,error:\"Failed to toggle like\"}\n  }\n}\n\nexport async function createComment(postId: string, content: string) {\n    try {\n      const userId = await getDBUserID();\n  \n      if (!userId) return;\n      if (!content) throw new Error(\"Content is required\");\n  \n      const post = await prisma.post.findUnique({\n        where: { id: postId },\n        select: { authorId: true },\n      });\n  \n      if (!post) throw new Error(\"Post not found\");\n  \n      // Create comment and notification in a transaction\n      const [comment] = await prisma.$transaction(async (tx) => {\n        // Create comment first\n        const newComment = await tx.comment.create({\n          data: {\n            content,\n            authorId: userId,\n            postId,\n          },\n        });\n  \n        // Create notification if commenting on someone else's post\n        if (post.authorId !== userId) {\n          await tx.notification.create({\n            data: {\n              type: \"COMMENT\",\n              userId: post.authorId,\n              creatorId: userId,\n              postId,\n              commentId: newComment.id,\n            },\n          });\n        }\n  \n        return [newComment];\n      });\n  \n      revalidatePath(`/`);\n      return { success: true, comment };\n    } catch (error) {\n      console.error(\"Failed to create comment:\", error);\n      return { success: false, error: \"Failed to create comment\" };\n    }\n  }\n  \n  export async function deletePost(postId: string) {\n    try {\n      const userId = await getDBUserID();\n  \n      const post = await prisma.post.findUnique({\n        where: { id: postId },\n        select: { authorId: true },\n      });\n  \n      if (!post) throw new Error(\"Post not found\");\n      if (post.authorId !== userId) throw new Error(\"Unauthorized - no delete permission\");\n  \n      await prisma.post.delete({\n        where: { id: postId },\n      });\n  \n      revalidatePath(\"/\"); // purge the cache\n      return { success: true };\n    } catch (error) {\n      console.error(\"Failed to delete post:\", error);\n      return { success: false, error: \"Failed to delete post\" };\n    }\n  }\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 481, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 487, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/twitterx/src/components/PostCard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/PostCard.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/PostCard.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+R,GAC5T,6DACA"}},
    {"offset": {"line": 495, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 501, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/twitterx/src/components/PostCard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/PostCard.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/PostCard.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2Q,GACxS,yCACA"}},
    {"offset": {"line": 509, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 515, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 519, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 525, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/twitterx/src/app/page.tsx"],"sourcesContent":["import { SignedOut, SignInButton, SignedIn, UserButton } from \"@clerk/nextjs\";\nimport Image from \"next/image\";\nimport { Button } from \"@/components/ui/button\";\nimport ModeToggle from \"@/components/ModeToggle\";\nimport { currentUser } from \"@clerk/nextjs/server\";\nimport CreatePost from \"@/components/CreatePost\";\nimport WhoToFollow from \"@/components/WhoToFollow\";\nimport { getPosts } from \"@/actions/post.action\";\nimport PostCard from \"@/components/PostCard\";\nimport { getDBUserID } from \"@/actions/user.action\";\n\nexport default async function Home() {\n  const user = await currentUser();\n  const posts = await getPosts();\n  const dbUserId = await getDBUserID();\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-10 gap-6\">\n      <div className=\"lg:col-span-6\">\n        {user ? <CreatePost /> : null}\n        <div className=\"space-y-6\">\n          {posts.map((post) => (\n            <PostCard key={post.id} post={post} dbUserId={dbUserId}/>\n          ))}\n        </div>\n      </div>\n      <div className=\"hidden lg:block lg:col-span-4 sticky top-20\">\n        <WhoToFollow />\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAKA;AACA;AACA;AACA;AACA;AALA;;;;;;;;AAOe,eAAe;IAC5B,MAAM,OAAO,MAAM,CAAA,GAAA,0LAAA,CAAA,cAAW,AAAD;IAC7B,MAAM,QAAQ,MAAM,CAAA,GAAA,iIAAA,CAAA,WAAQ,AAAD;IAC3B,MAAM,WAAW,MAAM,CAAA,GAAA,iIAAA,CAAA,cAAW,AAAD;IACjC,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;oBACZ,qBAAO,8OAAC,gIAAA,CAAA,UAAU;;;;+BAAM;kCACzB,8OAAC;wBAAI,WAAU;kCACZ,MAAM,GAAG,CAAC,CAAC,qBACV,8OAAC,8HAAA,CAAA,UAAQ;gCAAe,MAAM;gCAAM,UAAU;+BAA/B,KAAK,EAAE;;;;;;;;;;;;;;;;0BAI5B,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,iIAAA,CAAA,UAAW;;;;;;;;;;;;;;;;AAIpB"}},
    {"offset": {"line": 597, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 609, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/twitterx/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport { AppPageRouteModule } from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\nimport { RouteKind } from '../../server/route-kind'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nexport { default as GlobalError } from 'VAR_MODULE_GLOBAL_ERROR'\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: any\ndeclare const __next_app_load_chunk__: any\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nexport * from '../../server/app-render/entry-base'\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n})\n"],"names":["AppPageRouteModule","RouteKind","tree","pages","default","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree"],"mappings":";;;;;;AA0BA,8BAA8B;AAzB9B,SAASA,kBAAkB,QAAQ,2DAA2D;IAAE,wBAAwB;AAAW,EAAC;AAYpI,yEAAyE;AAEzE,cAAc;AAGd,SAASE,IAAI,EAAEC,KAAK,GAAE;AAWtB,OAAO,MAAMG,eAAe;AAG5B,EAAC;;;;;;;;;;AAED,cAAc,qCAAoC,sBAAA;AAElD,UAAA,kDAA4D;AAC5D,MAAA,CAAO,MAAMK;IAAAA;IAAAA,SAAc,IAAIX,mBAAmB;YAChDY,QAAAA;YAAAA,GAAY;YAAA;iBACVC,MAAMZ,UAAUa,QAAQ;sBACxBC,IAAAA,CAAM,CAAA;gBAAA,QAAA;oBAAA,IAAA;oBAAA;iBAAA;;eACNC,UAAU;;SACV,2CAA2C;cAC3CC,IAAAA;YAAAA,GAAY,GAAA;iBACZC,MAAAA,IAAU,IAAA;wBAAA;4BACVC,KAAAA,CAAAA,GAAAA,2KAAAA,CAAAA,KAAU,EAAE,eAAA,EAAA,MAAA,MAAA,MAAA,EAAA,iBAAA,CAAA,CAAA,EAAA,iTAAA,CAAA,UAAA,CAAA,GAAA,CAAA,KAAA,CAAA,KAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;4BACd,OAAA,GAAA,iTAAA,CAAA,UAAA,CAAA,KAAA,CAAA,CAAA,EAAA,iTAAA,CAAA,UAAA,CAAA,MAAA,EAAA;4BACAC,MAAU,CAAA,YAAA,CAAA;;qBACRC,YAAYnB;aACd;QACF,CAAE;QAAA,UAAA;YAAA,IAAA;YAAA;SAAA","ignoreList":[0]}},
    {"offset": {"line": 706, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 826, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/twitterx/node_modules/%40clerk/nextjs/dist/esm/app-router/server-actions.js"],"sourcesContent":["\"use server\";\nimport { cookies } from \"next/headers\";\nasync function invalidateCacheAction() {\n  void (await cookies()).delete(`__clerk_invalidate_cache_cookie_${Date.now()}`);\n}\nexport {\n  invalidateCacheAction\n};\n"],"names":[],"mappings":";;;;;AACA;;;;;AACA,eAAe;IACb,KAAK,CAAC,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD,GAAG,EAAE,MAAM,CAAC,CAAC,gCAAgC,EAAE,KAAK,GAAG,IAAI;AAC/E;;;;IAEE,uCAAmB,GAAnB;;AAAA,+OAAA","ignoreList":[0]}},
    {"offset": {"line": 845, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 851, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 866, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}