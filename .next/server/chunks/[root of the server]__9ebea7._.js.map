{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///Users/sodstar/development/web/frontend/x/src/app/api/tasks/route.ts"],"sourcesContent":["interface Task {\n    id: number;\n    title: string;\n    completed: boolean;\n  }\n  \n  interface CreateTaskRequest {\n    title: string;\n  }\n  \n  let tasks: Task[] = [\n    { id: 1, title: \"Learn Next.js\", completed: false },\n    { id: 2, title: \"Build a project\", completed: false },\n  ];\n  \n  export async function GET() {\n    return Response.json(tasks);\n  }\n  \n  export async function POST(request: Request) {\n    try {\n      const body: CreateTaskRequest = await request.json();\n  \n      if (!body.title) {\n        return Response.json({ error: \"Title is required\" }, { status: 400 });\n      }\n      const newTask: Task = {\n        id: tasks.length + 1,\n        title: body.title,\n        completed: false,\n      };\n  \n      tasks.push(newTask);\n      return Response.json(newTask, { status: 201 });\n    } catch (error) {\n      return Response.json({ error: \"Invalid request body\" }, { status: 400 });\n    }\n  }\n  \n  export async function DELETE(request: Request) {\n    try {\n      const { searchParams } = new URL(request.url);\n      const id = parseInt(searchParams.get(\"id\") || \"\");\n  \n      if (!id) {\n        return Response.json({ error: \"Task ID is required\" }, { status: 400 });\n      }\n  \n      const taskIndex = tasks.findIndex((task) => task.id === id);\n      if (taskIndex === -1) {\n        return Response.json({ error: \"Task not found\" }, { status: 404 });\n      }\n  \n      tasks = tasks.filter((task) => task.id !== id);\n      return Response.json({ message: \"Task deleted\" });\n    } catch (error) {\n      return Response.json({ error: \"Invalid request\" }, { status: 400 });\n    }\n  }"],"names":[],"mappings":";;;;;AAUE,IAAI,QAAgB;IAClB;QAAE,IAAI;QAAG,OAAO;QAAiB,WAAW;IAAM;IAClD;QAAE,IAAI;QAAG,OAAO;QAAmB,WAAW;IAAM;CACrD;AAEM,eAAe;IACpB,OAAO,SAAS,IAAI,CAAC;AACvB;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAA0B,MAAM,QAAQ,IAAI;QAElD,IAAI,CAAC,KAAK,KAAK,EAAE;YACf,OAAO,SAAS,IAAI,CAAC;gBAAE,OAAO;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACrE;QACA,MAAM,UAAgB;YACpB,IAAI,MAAM,MAAM,GAAG;YACnB,OAAO,KAAK,KAAK;YACjB,WAAW;QACb;QAEA,MAAM,IAAI,CAAC;QACX,OAAO,SAAS,IAAI,CAAC,SAAS;YAAE,QAAQ;QAAI;IAC9C,EAAE,OAAO,OAAO;QACd,OAAO,SAAS,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IACxE;AACF;AAEO,eAAe,OAAO,OAAgB;IAC3C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,KAAK,SAAS,aAAa,GAAG,CAAC,SAAS;QAE9C,IAAI,CAAC,IAAI;YACP,OAAO,SAAS,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QACvE;QAEA,MAAM,YAAY,MAAM,SAAS,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;QACxD,IAAI,cAAc,CAAC,GAAG;YACpB,OAAO,SAAS,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QAClE;QAEA,QAAQ,MAAM,MAAM,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;QAC3C,OAAO,SAAS,IAAI,CAAC;YAAE,SAAS;QAAe;IACjD,EAAE,OAAO,OAAO;QACd,OAAO,SAAS,IAAI,CAAC;YAAE,OAAO;QAAkB,GAAG;YAAE,QAAQ;QAAI;IACnE;AACF"}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}